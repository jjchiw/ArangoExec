{
    "scope": "source.aql",
    "completions":
    [
        "FOR",
        "IN",
        "LET",
        "FILTER",
        "SORT",
        "RETURN",
        "UPDATE",
        "WITH",
        "INSERT",
        "REMOVE",
        "COLLECT",
        "LIMIT",
        "ASC",
        "DESC",
        "INTO",
        "NOT",
        "AND",
        "OR",
        "NULL",
        "TRUE",
        "FALSE",
        "OPTIONS",

        { "trigger": "TO_BOOL(value)", "contents": "TO_BOOL(${1:value})" },
        { "trigger": "TO_NUMBER(value)", "contents": "TO_NUMBER(${1:value})" },
        { "trigger": "TO_STRING(value)", "contents": "TO_STRING(${1:value})" }, 
        { "trigger": "TO_LIST(value)", "contents": "TO_LIST(${1:value})" }, 
        { "trigger": "IS_NULL(value)", "contents": "IS_NULL(${1:value})" }, 
        { "trigger": "IS_BOOL(value)", "contents": "IS_BOOL(${1:value})" }, 
        { "trigger": "IS_NUMBER(value)", "contents": "IS_NUMBER(${1:value})" }, 
        { "trigger": "IS_STRING(value)", "contents": "IS_STRING(${1:value})" }, 
        { "trigger": "IS_LIST(value)", "contents": "IS_LIST(${1:value})" }, 
        { "trigger": "IS_DOCUMENT(value)", "contents": "IS_DOCUMENT(${1:value})" }, 
        { "trigger": "CONCAT(value1, value2, ...)", "contents": "CONCAT(${1:value}, ${2:value2})" }, 
        { "trigger": "CONCAT_SEPARATOR(separator, value1, value2, ...)", "contents": "CONCAT_SEPARATOR(${1:separator}, ${2:value}, ${3:value})" }, 
        { "trigger": "CHAR_LENGTH(value)", "contents": "CHAR_LENGTH(${1:value})" }, 
        { "trigger": "LOWER(value)", "contents": "LOWER(${1:value})" }, 
        { "trigger": "UPPER(value)", "contents": "UPPER(${1:value})" }, 
        { "trigger": "SUBSTITUTE(value, search, replace, limit)", "contents": "SUBSTITUTE(${1:value}, ${2:search}, ${3:replace}, ${4:limitvalue})" }, 
        { "trigger": "SUBSTRING(value, offset, length)", "contents": "SUBSTRING(${1:value}, ${2:offset}, ${3:length})" }, 
        { "trigger": "LEFT(value, length)", "contents": "LEFT(${1:value}, ${2:length})" }, 
        { "trigger": "RIGHT(value, length)", "contents": "RIGHT(${1:value}, ${2:length})" }, 
        { "trigger": "TRIM(value, type)", "contents": "TRIM(${1:value}, ${2:type})" },
        { "trigger": "TRIM(value, chars)", "contents": "TRIM(${1:value}, ${2:chars})" },
        { "trigger": "LTRIM(value, chars)", "contents": "LTRIM(${1:value}, ${2:chars})" }, 
        { "trigger": "RTRIM(value, chars)", "contents": "RTRIM(${1:value}, ${2:chars})" }, 
        { "trigger": "SPLIT(value, separator, limit)", "contents": "SPLIT(${1:value}, ${2:separator}, ${3:limit})" }, 
        { "trigger": "REVERSE(value)", "contents": "REVERSE(${1:value})" }, 
        { "trigger": "CONTAINS(text, search, return-index)", "contents": "CONTAINS(${1:text}, ${2:search}, ${3:return-index})" }, 
        
        { "trigger": "FIND_FIRST(text, search, start, end)", "contents": "FIND_FIRST(${1:text}, ${2:search}, ${3:return-index})" }, 
        { "trigger": "FIND_LAST(text, search, start, end)", "contents": "FIND_LAST(${1:text}, ${2:search}, ${3:return-index})" }, 
        { "trigger": "LIKE(text, search, case-insensitive)", "contents": "LIKE(${1:text}, ${2:search}, ${3:case-insensitive})" }, 
        { "trigger": "FLOOR(value)", "contents": "FLOOR(${1:value})" }, 
        { "trigger": "CEIL(value)", "contents": "CEIL(${1:value})" }, 
        { "trigger": "ROUND(value)", "contents": "ROUND(${1:value})" }, 
        { "trigger": "ABS(value)", "contents": "ABS(${1:value})" }, 
        { "trigger": "SQRT(value)", "contents": "SQRT(${1:value})" }, 
        { "trigger": "RAND()", "contents": "RAND()" }, 
        { "trigger": "DATE_TIMESTAMP(date)", "contents": "DATE_TIMESTAMP(${1:date})" }, 
        { "trigger": "DATE_TIMESTAMP(year, month, day, hour, minute, second, millisecond)", "contents": "DATE_TIMESTAMP(${1:year}, ${2:month}, ${3:day}, ${4:hour}, ${5:minute}, ${6:second}, ${7:millisecond})" }, 
        { "trigger": "DATE_ISO8601(date)", "contents": "DATE_ISO8601(${1:date})" }, 
        { "trigger": "DATE_ISO8601(year, month, day, hour, minute, second, millisecond)", "contents": "DATE_ISO8601(${1:year}, ${2:month}, ${3:day}, ${4:hour}, ${5:minute}, ${6:second}, ${7:millisecond})" }, 
        { "trigger": "DATE_DAYOFWEEK(date)", "contents": "DATE_DAYOFWEEK(${1:date})" }, 
        { "trigger": "DATE_YEAR(date)", "contents": "DATE_YEAR(${1:date})" }, 
        { "trigger": "DATE_MONTH(date)", "contents": "DATE_MONTH(${1:date})" }, 
        { "trigger": "DATE_DAY(date)", "contents": "DATE_DAY(${1:date})" }, 
        { "trigger": "DATE_HOUR(date)", "contents": "DATE_HOUR(${1:date})" }, 
        { "trigger": "DATE_MINUTE(date)", "contents": "DATE_MINUTE(${1:date})" }, 
        { "trigger": "DATE_SECOND(date)", "contents": "DATE_SECOND(${1:date})" }, 
        { "trigger": "DATE_MILLISECOND(date)", "contents": "DATE_MILLISECOND(${1:date})" }, 
        { "trigger": "DATE_NOW()", "contents": "DATE_NOW()" }, 
        { "trigger": "LENGTH(list)", "contents": "LENGTH(${1:list})" }, 
        { "trigger": "FLATTEN(list, depth)", "contents": "FLATTEN(${1:list}, ${2:depth})" }, 
        { "trigger": "MIN(list)", "contents": "MIN(${1:list})" }, 
        { "trigger": "MAX(list)", "contents": "MAX(${1:list})" }, 
        { "trigger": "AVERAGE(list)", "contents": "AVERAGE(${1:list})" }, 
        { "trigger": "SUM(list)", "contents": "SUM(${1:list})" }, 
        { "trigger": "MEDIAN(list)", "contents": "MEDIAN(${1:list})" }, 
        { "trigger": "PERCENTILE(list, n, method)", "contents": "PERCENTILE(${1:list}, ${2:n}, ${3:method})" }, 
        { "trigger": "VARIANCE_POPULATION(list)", "contents": "VARIANCE_POPULATION(${1:list})" }, 
        { "trigger": "VARIANCE_SAMPLE(list)", "contents": "VARIANCE_SAMPLE(${1:list})" }, 
        { "trigger": "STDDEV_POPULATION(list)", "contents": "STDDEV_POPULATION(${1:list})" }, 
        { "trigger": "STDDEV_SAMPLE(list)", "contents": "STDDEV_SAMPLE(${1:list})" }, 
        { "trigger": "REVERSE(list)", "contents": "REVERSE(${1:list})" }, 
        { "trigger": "FIRST(list)", "contents": "FIRST(${1:list})" }, 
        { "trigger": "LAST(list)", "contents": "LAST(${1:list})" }, 
        { "trigger": "NTH(list, position)", "contents": "NTH(${1:list}, ${2:position})" }, 
        
        { "trigger": "POSITION(list, search, return-index)", "contents": "POSITION(${1:list}, ${2:search}, ${3:return-index})" }, 
        { "trigger": "SLICE(list, start, length)", "contents": "SLICE(${1:list}, ${2:start}, ${3:length})" }, 
        { "trigger": "UNIQUE(list)", "contents": "UNIQUE(${1:list})" }, 
        { "trigger": "UNION(list1, list2, ...)", "contents": "UNION(${1:list1}, ${1:list2})" }, 
        { "trigger": "UNION_DISTINCT(list1, list2, ...)", "contents": "UNION_DISTINCT(${1:list1}, ${1:list2})" }, 
        { "trigger": "MINUS(list1, list2, ...)", "contents": "MINUS(${1:list1}, ${1:list2})" }, 
        { "trigger": "INTERSECTION(list1, list2, ...)", "contents": "INTERSECTION(${1:list1}, ${1:list2})" }, 
        { "trigger": "APPEND(list, values, unique)", "contents": "APPEND(${1:list}, ${2:values}, ${3:unique})" }, 
        { "trigger": "PUSH(list, values, unique)", "contents": "PUSH(${1:list}, ${2:values}, ${3:unique})" }, 
        { "trigger": "UNSHIFT(list, values, unique)", "contents": "UNSHIFT(${1:list}, ${2:values}, ${3:unique})" }, 
        { "trigger": "POP(list)", "contents": "POP(${1:list})" }, 
        { "trigger": "SHIFT(list)", "contents": "SHIFT(${1:list})" }, 
        { "trigger": "REMOVE_VALUE(list, values, limit)", "contents": "REMOVE_VALUE(${1:list}, ${2:values}, ${3:limit})" }, 
        { "trigger": "REMOVE_VALUES(list, values)", "contents": "REMOVE_VALUES(${1:list}, ${2:values})" }, 
        { "trigger": "REMOVE_NTH(list, position)", "contents": "REMOVE_NTH(${1:list}, ${2:position})" }, 
        { "trigger": "MATCHES(document, examples, return-index)", "contents": "MATCHES(${1:document}, ${2:examples}, ${3:return-index})" }, 
        { "trigger": "MERGE(document1, document2, ...)", "contents": "MERGE(${1:document1}, ${2:document2})" }, 
        { "trigger": "MERGE_RECURSIVE(document1, document2, ...)", "contents": "MERGE_RECURSIVE(${1:document1}, ${2:document2})" }, 
        { "trigger": "TRANSLATE(value, lookup, defaultValue)", "contents": "TRANSLATE(${1:value}, ${2:lookup}, ${3:defaultValue})" }, 
        { "trigger": "HAS(document, attributename)", "contents": "HAS(${1:document}, ${2:attributename})" }, 
        { "trigger": "ATTRIBUTES(document, removeInternal, sort)", "contents": "ATTRIBUTES(${1:document}, ${2:removeInternal}, ${3:sort})" }, 
        { "trigger": "VALUES(document, removeInternal)", "contents": "VALUES(${1:document}, ${2:removeInternal}" }, 
        { "trigger": "ZIP(attributes, values))", "contents": "ZIP(${1:attributes}, ${2:values})" }, 
        { "trigger": "UNSET(document, attributename, ...)", "contents": "UNSET(${1:document}, ${2:attributename})" }, 
        { "trigger": "KEEP(document, attributename, ...)", "contents": "KEEP(${1:document}, ${2:attributename})" }, 
        { "trigger": "PARSE_IDENTIFIER(document-handle)", "contents": "PARSE_IDENTIFIER(${1:document-handle})" }, 
        { "trigger": "NEAR(collection, latitude, longitude, limit, distancename)", "contents": "NEAR(${1:collection}, ${2:latitude}, ${3:longitude}, ${4:limit}, ${5:distancename})" },
        { "trigger": "WITHIN(collection, latitude, longitude, radius, distancename)", "contents": "NEAR(${1:collection}, ${2:latitude}, ${3:longitude}, ${4:radius}, ${5:distancename})" }, 
        { "trigger": "WITHIN_RECTANGLE(collection, latitude1, longitude1, latitude2, longitude2)", "contents": "WITHIN_RECTANGLE(${1:collection}, ${2:latitude1}, ${3:longitude1}, ${4:latitude2}, ${5:longitude2})" }, 
        { "trigger": "IS_IN_POLYGON(polygon, latitude, longitude)", "contents": "IS_IN_POLYGON(${1:polygon}, ${2:latitude}, ${3:longitude})" }, 
        { "trigger": "FULLTEXT(collection, attribute, query)", "contents": "FULLTEXT(${1:collection}, ${2:attribute}, ${3:query})" }, 
        { "trigger": "PATHS(vertexcollection, edgecollection, direction, followcycles)", "contents": "PATHS(${1:vertexcollection}, ${2:edgecollection}, ${3:direction}, ${4:followcycles})" }, 
        { "trigger": "TRAVERSAL(vertexcollection, edgecollection, startVertex, direction, options)", "contents": "TRAVERSAL(${1:vertexcollection}, ${2:edgecollection}, ${3:startVertex}, ${4:direction}, ${5:options})" }, 
        { "trigger": "TRAVERSAL_TREE(vertexcollection, edgecollection, startVertex, direction, connectName, options)", "contents": "TRAVERSAL_TREE(${1:vertexcollection}, ${2:edgecollection}, ${3:startVertex}, ${4:direction}, ${5:connectName}, ${6:options})" }, 
        { "trigger": "SHORTEST_PATH(vertexcollection, edgecollection, startVertex, endVertex, direction, options)", "contents": "SHORTEST_PATH(${1:vertexcollection}, ${2:edgecollection}, ${3:startVertex}, ${4:endVertex}, ${5:direction}, ${6:options})" }, 
        { "trigger": "NEIGHBORS(vertexcollection, edgecollection, startvertex, direction, edgeexamples)", "contents": "NEIGHBORS(${1:vertexcollection}, ${2:edgecollection}, ${3:startvertex}, ${4:direction}, ${5:edgeexamples})" }, 
        { "trigger": "NOT_NULL(alternative, ...)", "contents": "NOT_NULL(${1:alternative})" }, 
        { "trigger": "FIRST_LIST(alternative, ...)", "contents": "FIRST_LIST(${1:alternative})" }, 
        { "trigger": "FIRST_DOCUMENT(alternative, ...)", "contents": "FIRST_DOCUMENT(${1:alternative})" }, 
        { "trigger": "COLLECTIONS()", "contents": "COLLECTIONS()" }, 
        { "trigger": "CURRENT_USER()", "contents": "CURRENT_USER()" }, 
        { "trigger": "DOCUMENT(collection, id)", "contents": "DOCUMENT(${1:collection}, ${2:id})" }, 
        { "trigger": "DOCUMENT(id)", "contents": "DOCUMENT(${1:id})" }, 
        { "trigger": "SKIPLIST(collection, condition, skip, limit)", "contents": "SKIPLIST(${1:collection}, ${2:condition}, ${3:skip}, ${4:limit})" }, 
        { "trigger": "CALL(function, arg1, ..., argn)", "contents": "CALL(${1:function}, ${2:arg1}, ${3:argn})" }, 
        { "trigger": "APPLY(function, arguments)", "contents": "APPLY(${1:function}, ${2:arguments})" },


        //2.5
        { "trigger": "MD5(value)", "contents": "MD5(${1:value})" },
        { "trigger": "SHA1(value)", "contents": "SHA1(${1:value})" },
        { "trigger": "RANDOM_TOKEN(length)", "contents": "RANDOM_TOKEN(${1:length})" }

    ]
}